// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// index.html
// mech.html
// mechs.html
// mech.css
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHTML = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\x31\x52\xeb\x30\x10\x86\xfb\x77\x8a\x7d\x2a\x52\xbd\x58\x49\xaa\xc7\x64\xed\x01\x02\x0c\x0d\x03\x13\x42\x41\xa9\x38\x9b\x48\x83\x1c\x0b\x69\x31\xf1\x91\xb8\x06\x27\x63\x64\x39\xc6\x95\xfc\xc9\xfb\x7f\xfe\x67\x8d\x7f\x6f\x1e\x57\x9b\xd7\xa7\x5b\xd0\x5c\xd9\xe2\x0f\xa6\x03\x00\x35\xa9\x5d\x7c\x00\xc0\x8a\x58\x81\x66\x76\x53\x7a\xff\x30\x4d\x2e\xca\xfa\xc8\x74\xe4\x29\xb7\x8e\x04\xf4\x94\x0b\xa6\x13\xcb\x28\x58\x42\xa9\x95\x0f\xc4\xf9\xcb\xe6\x6e\xfa\x5f\xf4\x1e\x36\x6c\xa9\x78\xa0\x52\x07\xf2\x0d\x79\x94\xe9\x26\xbd\xb5\xe6\xf8\x06\xda\xd3\x3e\x17\xca\x19\xd9\xcc\x65\xe0\xd6\x52\x56\x86\x20\xc0\x93\xcd\x45\xc7\x41\x13\x71\x67\x44\x79\xee\x88\xdb\x7a\xd7\xf6\x9a\x78\x47\x3e\x41\xc4\xc5\xe8\x83\xd0\xcc\xb3\x59\x36\x43\xa9\x17\xfd\xb4\x1c\x8f\x23\xab\xed\xb9\x4e\xa4\x5f\x6b\xc7\xae\xb8\x27\x4f\xf0\x49\xa0\xe2\x61\x58\x03\x6b\x82\x6a\xd0\x07\x94\x6e\x48\xcb\x51\x1c\xe5\xc8\x8c\x0e\x4a\xab\x42\x18\xd6\x28\x0a\x18\x82\xb8\xaf\x6b\x26\x7f\x9e\x48\x24\x8a\x55\xed\x5a\x6f\x0e\x9a\xe1\xfb\x0b\x16\xb3\xf9\x05\x5c\x7b\x62\x86\xe7\x2a\xb6\x98\x58\x5e\x9e\xb6\x65\x88\x70\x79\xa8\x94\xb1\x59\x59\x57\x93\x03\x2f\xff\x41\x06\x57\xd6\xc2\x3a\x66\x03\xac\xa9\x2b\xba\xcb\x50\x26\x73\x5a\x63\x2a\x8a\x32\xfd\xfb\x9f\x00\x00\x00\xff\xff\x5c\xb6\x45\xad\x13\x02\x00\x00")

func indexHTMLBytes() ([]byte, error) {
	return bindataRead(
		_indexHTML,
		"index.html",
	)
}

func indexHTML() (*asset, error) {
	bytes, err := indexHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 531, mode: os.FileMode(436), modTime: time.Unix(1601250142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mechHTML = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x3c\xc5\xe0\xc3\x9e\x68\xdc\xf6\x04\xea\x24\x02\xb6\x20\xed\x81\x3f\x2a\x0b\x12\x27\xe4\x3a\xb3\xb5\x85\x13\x07\x7b\xa8\xb6\x5a\xed\x03\xf1\x1a\x3c\x19\x72\x9c\xa8\xe1\xb2\xca\xa1\xa7\xfa\xe7\x7e\xf9\x7e\x8e\xe4\x09\x3e\xdf\x7e\xba\xbe\xfd\xfe\xf9\x1d\x18\x6e\x5c\xf5\x0c\xf3\x0f\x00\x1a\x52\x75\x5a\x00\x60\x43\xac\xc0\x30\x77\x0b\xfa\xf5\xdb\x1e\x4b\xa1\x7d\xcb\xd4\xf2\x82\x4f\x1d\x09\x18\xa8\x14\x4c\xf7\x2c\x53\xc1\x06\xb4\x51\x21\x12\x97\x5f\x6f\xdf\x2f\x5e\x8a\xa1\x87\x2d\x3b\xaa\x3e\x90\x36\x28\xf3\x3a\xef\x3b\xdb\xfe\x04\x13\xe8\xae\x14\xaa\xb3\xf2\xb8\x92\x91\x4f\x8e\x0a\x1d\xa3\x80\x40\xae\x14\x3d\x47\x43\xc4\x7d\x17\xca\xf1\x74\xb8\xf7\xf5\x69\xa8\x49\x7b\x14\x32\x24\x5c\xf7\xaa\x48\xe1\x48\x01\x8e\xab\x62\x59\x2c\x51\x9a\xf5\x90\x96\xd3\x38\xb2\xda\x8f\xc7\x49\x74\x6e\xcd\x1c\xce\x90\xd0\x80\x76\x2a\xc6\x52\x34\xa4\xcd\x8f\xfe\x55\x44\x75\xb3\x45\xc9\xe6\xff\x60\x3d\x0d\x8a\xea\xe1\x01\x8a\x9b\x2d\x3c\x3e\xa2\xe4\x7a\xd2\x2f\xa7\x82\x79\xb6\x8f\xaa\xa1\x59\xbe\x14\xbc\x88\xf1\x1b\x85\x68\x7d\x0b\xb3\xac\x63\xf8\x12\xe2\x1d\x39\x52\x91\xe6\x89\xc7\xf0\x25\xc4\x5b\x8a\x3a\xd8\x8e\xad\x6f\x67\xb9\x27\xf9\x27\xfd\x28\x27\x17\x0c\xe5\xe4\xee\x61\x37\xb6\x0e\x43\x25\x2a\x40\xd9\x0d\x7f\xde\x79\xcf\x14\xc6\x44\x26\x51\x5d\xfb\xee\x14\xec\xc1\x30\xfc\xfd\x03\xeb\xe5\xea\x15\xbc\x0d\xc4\x0c\x5f\x1a\xcb\x06\xae\x1c\x6f\xee\xf7\x3a\x26\x78\x7d\x68\x94\x75\x85\xf6\xcd\xd5\x81\x37\x2f\xa0\x80\x37\xce\xc1\x2e\x3d\x1b\x61\x47\xfd\xa4\xd4\x05\xca\xdc\x9c\x07\x2d\x1f\x14\x65\xfe\x2e\xfc\x0b\x00\x00\xff\xff\x88\x47\x0f\xa4\x2f\x04\x00\x00")

func mechHTMLBytes() ([]byte, error) {
	return bindataRead(
		_mechHTML,
		"mech.html",
	)
}

func mechHTML() (*asset, error) {
	bytes, err := mechHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mech.html", size: 1071, mode: os.FileMode(436), modTime: time.Unix(1601250233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mechsHTML = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\x4b\x8e\x13\x31\x10\xdd\x73\x8a\xc2\x8b\x59\x11\x3b\xc9\x0a\x14\x77\x0b\x98\x80\x34\x0b\x3e\x0a\x03\x12\x2b\xe4\xb8\x2b\xb1\x85\xfb\x83\x5d\x13\x4d\x14\xe5\x40\x5c\x83\x93\x21\xb7\x9d\xa4\x95\x84\xd9\xb0\x6a\xbf\xaa\xe7\xd7\x55\xaf\x5c\xf2\xf9\xfc\xd3\xed\xfd\xf7\xcf\xef\xc0\x50\xed\xca\x67\x32\x7d\x00\xa4\x41\x55\xc5\x03\x80\xac\x91\x14\x18\xa2\x6e\x84\xbf\x1e\xec\xa6\x60\xba\x6d\x08\x1b\x1a\xd1\xb6\x43\x06\x19\x15\x8c\xf0\x91\x44\x14\x98\x81\x36\xca\x07\xa4\xe2\xeb\xfd\xfb\xd1\x4b\x96\x75\xc8\x92\xc3\xf2\x03\x6a\x13\xd0\x6f\xd0\x4b\x91\x22\x29\xeb\x6c\xf3\x13\x8c\xc7\x55\xc1\x54\x67\xc5\x66\x22\x02\x6d\x1d\x72\x1d\x02\x03\x8f\xae\x60\x3d\x0e\x06\x91\x7a\x45\x29\x0e\x35\xca\x65\x5b\x6d\xb3\x4c\x8c\xa1\x4f\x20\xc2\xe9\xe0\x87\xb0\x99\xf0\x31\x1f\x4b\x61\xa6\x99\x2d\x86\x74\x49\x6a\x79\x28\x27\xa2\x93\x6a\xc2\x1e\xb4\x53\x21\x14\xac\x46\x6d\x7e\xf4\xb5\xb3\x53\x3e\x32\x4c\x79\x37\x97\x82\xcc\x79\xf4\xa3\xaa\xf1\x5a\xfc\x1b\xfa\x60\xdb\xe6\x5a\x6a\x81\x0e\x55\xb8\x7a\x6b\x8e\x41\x7b\xdb\xd1\xc5\x4d\x29\xc8\x9f\xd0\x6e\x07\x5e\x35\x6b\x04\xde\x3b\x00\xfb\xfd\xbf\x7a\x39\xeb\xa2\x1a\xc2\xff\x9b\xff\x03\xad\x8e\xf3\x3f\xea\x29\xb0\x55\xc1\xe2\xa8\x59\x1e\x38\x17\xb1\x8c\x20\x76\x3b\xe0\x77\x73\xd8\xef\x59\x79\x3c\x4a\xa1\xca\xd8\x59\x75\x5e\x64\x64\x44\x63\x7b\xce\xf5\x74\xf6\xf7\x09\x46\xb6\xf9\x09\xc6\xc0\xed\x0b\xd6\x85\xe1\xd8\x54\x27\x9f\xa5\x18\x3c\x21\x29\x06\xaf\x4b\x76\x07\xfb\xb3\x79\x2c\xb6\xd8\xe5\xe4\xaa\x6d\x09\x8f\x03\x4a\x88\x95\xb7\x6d\xb7\xf5\x76\x6d\x08\xfe\xfc\x86\xe9\x78\xf2\x0a\xde\x7a\x24\x82\x2f\xb5\x25\x03\x37\x8e\x66\x8f\x4b\x1d\x22\x78\xbd\xae\x95\x75\x5c\xb7\xf5\xcd\x9a\x66\x2f\x80\xc3\x1b\xe7\x60\x11\xef\x06\x58\x60\xbf\x0b\x15\x97\x22\x29\xa7\x55\x4a\x85\x4a\x91\xf6\xff\x6f\x00\x00\x00\xff\xff\xd9\xde\x70\xcb\x17\x04\x00\x00")

func mechsHTMLBytes() ([]byte, error) {
	return bindataRead(
		_mechsHTML,
		"mechs.html",
	)
}

func mechsHTML() (*asset, error) {
	bytes, err := mechsHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mechs.html", size: 1047, mode: os.FileMode(436), modTime: time.Unix(1601250158, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mechCSS = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\xed\x72\xdb\x38\x92\xbf\xc5\xa7\xe8\xe5\x55\x52\x54\x46\x22\xfd\x31\x99\x89\x19\x39\x75\x8e\xec\x24\xbe\xb1\x1d\x97\xed\xd9\xd9\xad\x6c\x6a\x02\x93\x90\x88\x31\x09\x70\x01\xd0\xb2\xc6\xe5\x07\xba\xd7\xb8\x27\xbb\x6a\x00\xfc\x90\x2c\x65\x9d\x8c\xa7\xee\xb6\x2a\xf9\x61\x11\x40\xa3\xd1\xdf\xdd\x68\x32\x51\x04\xe7\xa7\xfb\x7f\x1b\xbe\x61\x39\x1d\x8b\x72\x2e\xd9\x34\xd3\x17\xf4\x46\xc7\xf0\x3f\xff\x0d\x5b\x1b\x5b\x1b\xf0\x5a\x52\xad\xe1\xbc\x60\x3a\x83\xd1\xcd\x65\xa2\xf0\xe9\x3f\xa7\x05\x61\x79\x98\x88\xe2\x95\x57\xe3\x38\x62\x09\xe5\x8a\x0e\x0f\x53\xca\x35\x9b\x30\x2a\x63\xd8\x2b\x49\x92\xd1\xe1\x56\xb8\xe1\x79\x25\x49\xae\xc8\x94\x42\x41\x18\xf7\x3c\x56\x94\x42\x6a\x08\xbc\x9e\x9f\x08\xae\xe9\x8d\xf6\xf1\x51\xce\x4b\x2d\x22\x49\x78\xda\x19\xea\x5c\xe1\x88\xf2\x44\xa4\x8c\x4f\xa3\xdf\x94\xe0\x38\x31\x29\xcc\xa6\x4c\x17\x79\xa4\x69\x51\xe6\x44\x53\x9c\x60\x02\xff\x72\xaa\xdd\x4f\x94\x69\x5d\xe2\xb3\x30\x78\x94\x96\x8c\x4f\xed\xe3\x9c\x27\xf8\xab\x59\x41\x7d\xcf\xeb\xf9\x53\xa6\xb3\xea\x12\x19\x8b\x26\x44\xb3\x2c\x52\x5a\x56\x89\x36\xc0\x9d\xb5\xa9\x18\x26\x19\x8b\x92\x8c\xad\x5d\x88\x0a\x96\xa6\x39\x9d\x11\x49\xd7\xc0\x08\xb9\x06\xad\xa4\x3c\xa5\x72\x69\x4d\x5c\xe5\x62\x1a\x55\x39\x4b\x7d\xaf\xef\x79\x89\xe0\x4a\x03\xe3\x29\xbd\x79\x77\x71\x7c\x04\x96\x29\xd8\x85\x4f\xde\xe8\x2f\xfb\xef\xc7\x17\x7f\x3f\x3d\x00\x94\xcc\x2b\x6f\x64\x7f\x00\x46\x19\x25\x29\x3e\x00\x8c\x0a\xaa\x09\xa0\x5c\x86\xf4\x9f\x15\xbb\xde\xb5\x5a\xe0\x7a\xa8\xe7\x25\xf5\xc1\x8d\x76\x7d\xd4\x4c\x84\x08\x5e\x42\x92\x11\xa9\xa8\xde\xfd\xf9\xe2\xcd\xf0\x85\xef\xf0\x68\xa6\x73\xfa\xea\x98\x26\x99\xa2\xf2\x9a\xca\x51\x64\x67\xec\xaa\xd2\x73\x7c\xee\xf5\xf0\x64\x2a\xe1\xd6\xeb\xf5\x00\x2e\x49\x72\x35\x95\xa2\xe2\xe9\x30\x11\xb9\x90\x31\xfc\xc7\xd6\xe6\xd6\xf3\xad\xd7\x2f\xcd\x72\x49\x52\x54\x73\x0c\xdb\x1b\xe5\x8d\x9d\x42\x2a\x86\x24\x67\x53\x1e\x43\x42\xb9\xa6\xd2\xce\x4f\x04\xd7\x43\xc5\x7e\xa7\x31\x6c\x3f\xaf\x81\x6b\x9c\x3f\xec\xed\xbc\x79\xfd\x1c\xe7\xee\xbc\x5e\x6f\x22\x84\xfe\x62\x0a\x36\xff\x25\x05\xf5\xf6\xbd\x1f\x9e\xbf\xd8\xfe\xd1\xce\x65\x14\xdd\x28\x86\xe7\x66\xb7\x3b\x1f\x65\x38\x80\x4b\x91\xce\x1d\x0d\x35\xd4\xe6\xc6\xc6\x93\x9a\xc8\x66\xb9\x57\x10\x39\x65\x3c\x86\x0d\x5c\xea\x19\x3e\x27\xa4\x60\xf9\x3c\x06\x45\xb8\x1a\x2a\x2a\xd9\xc4\xac\x0d\x67\xf4\xf2\x8a\xe9\xa1\x95\x45\x21\x84\xce\x0c\xed\x84\x6b\x46\x72\x46\x14\x4d\x2d\x5c\x21\x7e\x1f\x0a\x75\x73\x0f\x70\x2a\xc9\x5c\x25\x24\xa7\x06\x6c\x95\x68\x5e\x6c\x8d\xb7\xbf\xb7\xbc\xa5\x4c\x95\x39\x99\xc7\x30\xc9\xa9\x13\x0d\x3e\x0d\x53\x26\x69\xa2\x99\x40\xf1\x88\xbc\x2a\x78\xcd\x52\xb6\xe9\xf8\xad\xb1\xed\xbc\xde\x76\xd8\xcc\xf2\xd6\x00\xb2\xed\x01\x64\xdf\x5b\xbe\x6b\xa8\xc9\x64\xd2\x72\x6e\x35\x9c\x90\x3c\x09\x36\x7f\x28\x6f\xe0\x3b\xd8\xba\x2e\x18\xef\xdb\xf3\xad\xa8\x86\x5a\x94\x31\x6c\x6e\xd5\x0a\x73\xb3\xd2\x09\x79\x79\x3e\xa7\x93\xce\xb4\x13\xf7\xf0\x52\x68\x2d\x8a\x18\x36\x3e\x6f\x4b\x89\x48\xa9\x25\x77\x41\x31\x85\xe0\x42\x95\x24\xa1\x35\x9c\x26\x97\x39\xed\xea\xf3\x51\x89\x6c\xe6\x67\x2c\xd5\x59\x0c\x3b\x2f\x9e\x38\xb0\x9b\xa1\x9b\xe2\x82\x3b\xad\x0a\x99\x52\x39\x44\xea\x8c\xce\xad\x59\xd1\xa2\xd4\xf3\x61\x42\xf3\x5c\xc5\x90\xb1\xd4\xc2\x8a\x4a\xe7\x8c\x53\x07\x04\x20\xae\xa9\x9c\xe4\x62\x36\xbc\x89\x49\xa5\xc5\xa2\x60\x9c\x9e\x5a\x6e\x75\x66\x19\xee\x3a\x0c\xf2\xf1\x72\xad\xe3\x8d\xb7\xb7\xb6\xc7\x8b\x58\xb7\xf7\x7f\xdc\x3f\xf8\xb1\x41\x2c\x63\xae\x33\x0c\x8d\x79\x1a\x88\x34\xed\xdf\xae\x45\x73\x0f\x9c\x5e\x53\xbe\x12\x7e\x7b\x6f\xfb\xcd\xf7\xaf\x11\x9e\x38\x03\x35\x14\xa7\x34\x11\x92\x58\x43\xae\xa5\xd7\xd2\xf5\xe3\x0f\xe3\xf1\x0f\x8d\xed\x86\x05\x4d\xb2\x5f\x4d\xbc\x73\x4a\x66\x7c\xd8\x71\xeb\xeb\x6c\xb5\x09\x6f\xdc\x33\x61\x03\x32\x73\x3b\x2f\x45\x9e\x2e\x1c\xf1\x87\x90\x1b\x2c\x2e\x9c\x3b\x46\xd1\x61\x63\xd8\x84\x0d\xa8\xf5\x69\x80\x16\x22\xa4\x71\x6a\x95\x49\xc6\xaf\x9c\x21\xdc\x61\x06\x89\x5c\x44\xc7\xc7\x3a\x9b\x8c\x30\x6a\xb9\x80\x6f\xe3\xbc\x1d\xe0\x70\xab\x93\x1a\xe0\x7a\x33\xdc\x08\x37\x46\x51\xb6\xe5\xa0\xa3\x2e\xf8\xc8\xd8\x4f\xb3\x55\xb7\x58\xed\x58\x42\x92\x13\xa5\x76\xfd\x56\xea\x7e\xbb\x8e\x10\xd9\xab\xc3\xfd\x51\xa4\xb3\xe5\xd9\x13\x52\xd0\x55\xf3\x7f\xa5\x52\x31\xc1\x57\x2d\x9d\xd1\x9c\x12\xb5\x72\xd7\x3e\x55\x89\x64\xa5\xbe\xb7\x73\x14\x69\xd9\x8e\x6e\x6f\x41\x12\x3e\xa5\x10\x1a\x09\xc0\xdd\xdd\x3a\x5e\x96\xb8\x48\xbb\xc3\x3f\x96\xa9\x2b\x3d\x69\x32\x75\x83\x8f\x00\x4b\x77\xfd\x4c\xd2\x89\x0f\xf8\x77\xd7\x0f\x23\x24\x43\x45\xb7\xb7\x10\x1e\xee\xc3\xdd\x9d\xff\xaa\x79\x1c\x45\xe4\x15\x72\x96\x2e\x13\x89\x10\x28\x58\x03\xb3\x7a\xd9\xc9\xf7\x33\x10\x4e\xcc\x9f\x81\xe8\x48\xfb\x1e\xd4\x3d\x81\x53\x9e\xb6\x72\x1e\x45\x1d\x13\x1a\x45\x1d\xeb\x1a\x95\xb5\xf8\x9d\xf0\x7c\x64\xb1\x74\x8b\xce\x0d\x1c\x84\x1d\xf9\xaf\x9a\xea\xd8\x16\xc6\x9b\x3b\x0b\x85\xf1\xd3\x5c\xbf\xbc\x5f\x1b\x3f\x9d\xea\x97\x03\x08\x61\x2f\xcf\xe1\x0c\xf7\x2a\x38\xa3\xc6\x17\xd2\x70\x14\x59\xcc\xd6\x95\x2c\xa1\xa3\xc8\x56\x6a\xde\xa7\xba\xbe\x43\xbd\x2c\x95\x77\xff\x47\xd5\xdd\xb7\xba\xee\x5b\x5d\xf7\xad\xae\xfb\x56\xd7\x7d\xab\xeb\xbe\xd5\x75\x8f\x5c\xd7\x2d\x15\x58\xab\xca\xbc\x55\x75\x5d\xba\x58\x43\x75\x2a\x96\xf5\x35\xc2\xc3\x4e\x5b\x5d\x2f\xae\x38\x6f\x65\xfd\xf3\x35\x27\xd6\x95\xd2\x83\x4e\x5d\x57\x56\x7d\xcd\xc1\x75\x01\xf6\xa0\x83\xd7\x55\x6b\x5f\x73\xf0\xda\x2a\x7a\xcd\xd9\x0f\xad\x03\xff\xbd\xab\xbe\x28\x82\xb7\x54\x1f\xf0\x6b\x90\x54\x57\x92\x2b\x20\x1c\x28\xbf\x86\x6b\x22\x99\x09\xc3\xd7\x24\xaf\x28\x08\x09\x04\x52\x3a\x21\x55\xae\x3b\x9b\x26\x15\x4f\x40\x93\x2b\xaa\x80\x0b\x20\x0a\x18\x2f\x2b\x0d\x84\xa7\x0d\xbe\x2b\x3a\x1f\xc0\x84\xe4\x39\x86\xce\xba\xac\xb4\x3f\x9e\xd9\x6e\x51\x05\xab\xe0\xfa\x35\xfc\xad\xd7\x63\x13\x4b\xca\x00\xc4\x15\xc4\xbb\x20\x54\x78\x24\xc4\x55\x55\xba\xcd\xfd\x97\xb8\x80\x31\xc7\x9e\x6c\xa1\x3d\x8c\x48\x6e\xa2\x46\xee\xdd\x19\xbe\x4f\xe8\xec\xe7\xa3\xc3\xfd\x96\x71\x30\x43\x82\x4f\xf6\xd8\xb0\x0b\xf6\x00\x56\xbb\x5c\xb9\x6d\x41\x97\x05\x4e\x67\x2c\x1d\xc0\xaf\x48\x7e\x95\xb3\x34\x3c\xa1\xb3\xc0\x3c\x5c\xb0\x82\x2a\x4d\x8a\x32\xd0\xac\xa0\xe1\x89\x98\x05\xfd\xfe\x00\xef\x73\x69\x78\x66\x42\x5b\xbf\x61\xc3\x60\x09\xcf\x0d\xd6\xa0\xef\x98\x29\xc8\x15\xd5\x45\x99\x43\x46\xf3\x92\x4a\x43\x2d\x9a\xae\x25\xa6\x5e\x0d\x52\xa2\x09\x14\xa4\xfc\x60\x89\xfa\xc8\xb0\xfe\x9c\x90\x84\xde\xde\x0d\xc0\xec\xaf\x05\x1f\xd8\x87\x01\x50\x29\x85\xec\x23\xf9\x97\x15\xcb\xb1\xf6\x8e\x77\xe1\xa9\x6b\x69\x87\xaf\xed\xdc\xed\x9d\xd7\xd3\xb8\x50\x77\xc5\xc3\xe3\x4a\xe9\xa0\x19\x21\xa3\x3e\xa7\x33\xbf\x1f\x9e\x62\xd5\x1f\xe0\x59\xfd\xbe\xd1\x2a\x95\x06\xa5\x0e\x0f\x6e\x68\x52\x69\x1a\xb8\x73\x06\x80\xd4\xf6\x5f\x1a\x80\xbf\xec\x02\x67\x79\x57\xbd\x9f\x3e\x19\xda\x8c\x82\x15\x22\x70\xdb\x5a\xc9\xd4\x90\x6a\x80\x7b\x9d\xa0\xec\xdd\xd8\x36\xd9\x61\x22\xa4\xb9\xf1\x28\x0f\xaf\x29\x8b\x6b\xb7\x5e\xcf\x8e\x3f\x7c\xc4\x5f\xf8\xf4\x9b\x12\x3c\x36\x01\x42\xf9\x9f\x3a\xd8\x96\x91\xb5\xb8\x3a\xa8\x0e\xf7\xdb\x70\xe3\x0c\xc2\x21\x64\xa9\xff\xc9\xeb\x99\xc0\xbe\x72\x9d\x93\x82\x22\x44\x1d\x84\xef\x43\x5c\xdb\x15\x04\xaa\x03\xe6\x7d\x20\x69\x57\x10\xa8\x1b\xd9\x16\x81\xd2\x76\xa5\x61\xf1\x84\xce\x0c\x2f\x0f\xb0\xff\x67\x08\xd8\x98\x3f\x0e\x82\xbe\x9d\x44\x11\x38\x6d\x3c\xc5\x31\xea\xf1\x70\x3f\x6e\xbd\x64\x80\x7a\xb4\x07\xee\x53\xac\x8a\x11\xea\x8d\x14\xc5\x7f\x9d\xbf\x3f\xe9\x9e\x2d\xed\xfd\x8f\x09\xe7\x17\x9f\xa1\xc4\xd9\xae\x25\xe8\x3e\xd6\x60\x19\x55\x1f\x82\xee\x3e\x63\xf3\xa6\x6a\x42\x83\x37\x54\xdf\x79\x3d\x67\xad\x28\x2f\xb4\x6a\x8b\x56\x3a\x5c\xfd\xd0\x8e\x03\xdc\xd6\x5a\xf7\x7d\xe3\xe5\x2c\x6f\xad\x17\x81\xb1\x92\xd8\x6d\xc5\xd1\x48\xab\x30\xf4\xb4\xe6\x6b\xcc\xaf\x0d\xce\xad\x01\x5f\x13\xf7\xe4\xec\xd5\x40\x8f\x05\x9f\xb0\x69\xd7\x40\x13\x33\x63\x4d\x74\x71\xf5\xd6\xeb\xbd\x13\x4a\xd7\x41\xac\x77\x2a\x64\x33\x68\x2c\xc1\x6d\x79\x80\x2d\x64\x42\xe9\x01\x94\x2d\x12\x78\x66\x37\x37\xf6\x61\x87\xc1\x3d\xc0\x7e\x0d\xd9\x35\x1a\x3b\x83\x12\x44\x22\x63\x8b\xde\xeb\x19\x2a\x63\xb3\xbb\x63\x41\x67\x54\x95\x5d\xa6\x25\x55\xa5\x65\xb9\xbb\xd2\x78\xe5\x2a\x7f\x34\x46\xeb\x6c\xb7\xeb\xfa\xb8\x76\x80\xd6\xb1\xb4\xcb\x58\x4c\xd7\x67\xf6\x4e\x0f\x1f\x22\xa6\x64\xd2\x08\x06\x9e\x25\x19\x0b\x8f\xab\x9b\x0e\x86\x44\x52\xa2\xf1\x2a\x44\x41\x8a\x4a\x53\x65\xf8\xb1\x55\x70\x23\xc8\xbd\xd3\xc3\xa0\x83\xa7\xdf\x20\x32\x02\xc4\x6d\xc6\x64\x71\xf2\x84\xce\xce\xcc\x44\xd0\xf7\x5c\xd8\x3c\xa1\xb3\x73\x83\x0f\x71\xe0\xac\xdd\x11\xbe\x95\xa2\x2a\x03\x3c\x23\x90\x66\xaf\xdd\x68\xbc\xa2\x97\x08\x69\x36\xe3\xaf\x09\xee\xe6\xe1\xbd\x89\x1c\xca\x5c\x32\xf6\xf2\x5c\xcc\x68\xfa\x5e\xb2\x29\xe3\x2a\x06\x80\x0f\x1f\xad\xc8\x6e\xfd\x67\xfe\xdd\xa0\x03\x73\x4c\x75\x26\xd2\x25\x98\xb7\x07\x17\xfe\x00\xfc\xd3\xf7\xe7\xe6\x77\xff\xe0\xe8\xe0\xe2\x60\x71\xdf\x3b\xe3\x73\x4b\xfb\xf6\x92\x84\x96\x1a\xb7\xec\x55\x3a\x13\x92\xfd\x6e\xee\x60\x38\x31\x76\x2d\xa9\x8b\x79\x49\x1d\xa6\x83\x9b\x52\xa8\x35\x98\x8e\x18\xbf\xea\x1e\x38\x96\xd4\xbc\x68\x26\x78\xc7\xd5\xb2\xa2\x66\xe9\x98\xdc\xec\x4d\x69\xdc\x46\x77\xd8\xde\xd8\x18\x00\xe6\x06\x72\xc3\x8a\xaa\x70\x05\x14\x17\x1a\xd8\x94\x0b\x49\x53\xb8\x9c\x03\xe1\x73\x10\x13\x28\xc8\x6f\x42\xc2\xa5\x14\x33\x45\xa5\xc2\xbb\x51\xdf\xeb\xf5\xa2\x08\xf6\xd2\x14\x94\x28\x28\xb4\x2f\x75\x41\x0b\x10\x95\xb4\x86\x20\x31\x96\x84\x3f\x2b\x6a\x25\xff\x8e\xf0\x34\xa7\xd2\x50\x64\x5f\xe6\x86\xe7\x54\x3b\x86\x91\xdf\xc0\xcd\x76\xa6\x30\x06\xf6\x0d\xa5\x8a\x6a\xe8\xf6\xeb\xc0\xde\xa6\x94\xa9\x85\xca\x32\x67\x89\x91\xa1\x79\x0d\x6e\x2f\x90\x35\x4d\xe1\x91\x98\x4e\x31\x55\x37\xff\xa2\x08\x72\x31\x05\x52\x32\x90\xf4\x9f\x15\x55\x1a\xaf\x93\xb9\x5a\xda\xb7\x6f\x4b\xc9\xb1\x28\x4a\x49\x95\x32\x64\x24\x6e\x80\xfe\x5a\xe5\x5a\x0d\xa0\x10\x4a\xe7\x73\x98\xfe\xce\xca\x12\x9d\x8d\x28\x45\xb5\x32\x0e\xb4\x82\x16\x4c\xfc\xe5\x79\x4e\x54\x46\xd5\xc0\xd1\x52\x10\x9d\x64\x50\x12\x9d\x29\x98\x61\x09\x4d\x40\x4b\xc2\x72\x53\x84\x22\xe8\xc0\x38\x72\x09\x4c\x0f\x0c\x5e\x94\x03\xe3\x95\xf5\x37\x84\xd2\x99\x14\xd5\x34\x33\x3e\x58\x54\x37\x4b\x67\x9e\xd1\x44\x5c\x53\xd9\x8a\x20\x8a\x40\xda\x39\x98\x48\x51\x40\x49\x38\x4b\xec\xd9\xa2\xd2\x90\x48\xa2\x32\x73\xb8\xf5\xe1\x5e\x0f\x5d\xae\x27\xad\x77\x05\x7e\x44\x4a\x16\x5d\x6f\xfa\x03\x58\xe3\x79\x3d\xf3\xa7\x27\xc3\xb7\x54\x07\xbe\xed\xa3\xfb\x03\x50\x38\x36\xf5\x4a\x80\x65\x95\x81\x38\x15\x6a\x11\x64\x6c\xa2\x89\xcd\xcb\xfd\xfb\x68\xa2\x5b\x96\xde\x75\x71\xb5\x50\xfb\x34\xa7\x86\xbc\x25\x40\x3b\xdf\x81\xbd\xab\x6d\xb8\xe5\xe8\xc1\xbc\xd4\x47\xbf\x13\x05\x7d\x77\x71\x7c\xb4\x92\xc8\x05\x5e\xd7\x42\xdd\x63\xa5\x03\x59\x93\x78\x67\x82\x9d\xcd\x2f\xce\xa7\x6c\xf4\xb6\xe1\xb0\x9b\x40\x9c\xb2\x8c\x6f\x2c\xae\xde\x7a\xbd\x4e\xe8\x75\x08\x3a\x3c\x3c\x28\x55\x6a\x5d\xd6\x1e\xfc\xa6\xe2\x89\x0d\xec\x81\x82\x67\xf6\xac\x3e\x2c\x08\xe5\x1e\x7c\x27\x4f\x1a\x41\xcf\x2c\x04\xe6\x3a\xc1\x15\xfd\x45\x32\x8d\xf6\x29\xe1\x99\x9b\x37\x6e\x59\x07\x72\xdb\xcf\x89\x77\xc1\xb7\x8d\x7d\xdb\x84\x19\x65\x9b\x4d\xc3\xa5\xdb\x6e\x19\x95\xaf\xb4\x9c\x9b\x03\xe2\x28\xca\x45\x42\x72\x4c\xc5\xf1\xce\xce\x8e\x95\x3c\x5e\x70\xdd\x45\xd3\xdd\x33\x7d\xaf\x89\x49\x86\x81\xd9\x00\xe4\xa0\x8e\x37\xfd\x36\x6b\xd7\x4a\x7d\x34\x91\x39\x77\x78\x54\x79\x39\x46\x4c\xfd\x68\x19\x31\x5c\xaf\x60\xe3\x51\xb5\xdf\xb1\xf6\x47\x65\xc7\x7c\xce\xd3\xd4\xb7\x36\x73\x9b\xa7\xd8\xf2\x35\x68\xfa\xd4\x46\x5b\x83\xfa\xb2\xd6\x5c\x28\xdd\xd7\x4a\xe1\x31\x29\x03\x83\xac\x3f\x68\xbf\x11\x42\x77\xbb\x5f\x02\x37\x09\x4a\x13\x5d\xa9\x40\x0e\x2c\xbd\x76\x78\x70\x53\xd2\x44\x9b\x74\xf3\x86\xb0\x9c\xa6\xfd\xce\x8e\x8e\xd4\x9f\x22\x7b\xb7\x78\x85\xf0\xfd\x81\xb9\x6c\xc5\xb6\xa8\x36\xc5\x59\x0c\xfe\x85\xbb\x7a\xc2\xc4\xa0\xc1\xe4\xe9\xbe\x72\xba\x73\x28\x51\x62\x8e\xbd\x87\x98\x67\x1b\x3c\x1f\x47\xab\xdd\x60\xfc\xa8\x3a\x2d\xea\x2b\x0c\x2a\x6a\xd5\xb5\x27\x7c\x2d\xd2\xf9\x57\xe8\xe6\x35\x49\xeb\x83\xbe\x52\x29\x87\xfc\x9a\xe4\x2c\x35\xb6\x05\xb8\x71\x95\x32\x26\x85\x0e\x4f\x25\xe3\x7a\x12\xf8\x46\x48\x98\x2e\x39\x9d\xd9\x5d\x31\x3c\x51\xff\xc0\x72\xce\xdd\x9a\xfa\x8e\x63\x05\xbb\x58\xab\x50\x9e\x06\xd6\x72\xe1\x99\xbb\x84\x7d\x96\x50\x87\x65\x25\xb5\xbc\xca\x73\x43\xe0\x92\x6b\x3f\xaa\x57\x3f\xb6\x43\xa7\xa8\xf5\xba\x3b\x73\x21\x59\x71\x5e\x92\x84\x06\x98\x7a\x7f\x3e\x3b\x3a\x25\x92\x14\xa8\x56\xbc\xe6\x98\x74\xd8\x95\xf6\xdb\x83\x8b\x25\x21\x33\xe3\x7f\x98\x02\xd9\x00\x98\xa6\x05\x62\xb7\x5f\x19\x58\xa1\x1b\xa3\x61\x13\xb3\x66\xee\xb0\xbb\xc0\x52\x70\x79\xfd\x33\x72\x77\xf0\xb5\xdc\x9f\x1a\x6c\x1f\xd8\xc7\x15\xd2\xef\xda\x87\x4d\xde\xde\x12\xdd\xfb\x2c\x35\xf5\xf5\x84\xf1\xd4\x36\x5e\x96\x18\x78\xb8\x55\x7f\x85\x51\x17\x4c\x29\x34\x51\x96\xae\x32\x96\x47\x4f\x03\x7f\x46\x16\xf8\xb3\x8c\xe6\xd7\x2f\x37\x9a\x87\x65\x1a\x4d\x8b\xfe\xa0\xf9\x58\xc1\x1a\xc9\x8a\x68\xf6\x35\xb9\xe6\x4f\xc9\x36\x5d\x13\x36\x36\xfc\xf9\x9c\xf3\x6f\x6a\xf2\xed\x6d\xe0\x71\x2c\xbe\x7b\xbb\xf8\xff\x63\xf0\x96\x2a\x38\xdc\x5f\x19\x26\xb1\xf6\xf9\x72\xab\x5f\x95\xc1\x3e\xc4\x06\xd9\x47\x57\x62\x7e\x30\xa3\xef\x36\xe3\x8f\x61\x18\xf6\xbd\x7f\x65\xdc\xef\x7f\xea\xaf\x09\xc2\x75\xc1\xba\xda\xc8\xfe\x54\xbb\xa9\xf3\xff\xe1\xfe\x82\xdd\x34\x2d\xa8\x2f\xee\x98\x9d\x2f\x76\xc2\xda\x46\x56\xa7\x19\xe6\x50\x77\x9a\x89\x76\xc6\x5c\x7f\x26\xd3\x18\x31\x76\x9a\x87\x05\x61\xfc\x01\x74\xd4\x2f\x56\x18\x0f\x8c\x4d\x25\xfa\x66\x00\x09\xe1\x09\xcd\x6d\x63\xcc\xfc\x17\x83\xf0\x17\xa6\xb3\xb1\x99\x0d\xea\xa9\xd7\xcd\x27\x04\xe6\x42\x9a\xd2\x09\x95\x6e\xa7\xe9\xca\x5d\x13\x09\xb3\x29\xa8\x39\x4f\xc2\x5f\x08\xd3\xa6\x11\x57\xc3\xcd\xa6\x66\xce\x00\xe2\xc5\x0b\xcf\x72\x2f\xd0\xfc\xe3\x83\xf1\xbb\xf3\x83\xb3\xbf\xfe\xfa\xce\x35\xcd\xfc\xbe\xd7\x33\x8d\xd5\x55\x40\xa7\xef\xcf\x0c\xd0\xce\xce\xce\x0e\x02\x26\x74\x0d\xe0\xf8\xe0\xac\xc1\x76\x45\xe7\x2b\x61\x7e\x3a\xf8\x7b\x0d\x82\xc2\xb7\x6d\xc5\x7b\x0d\xde\x7e\xb7\x1d\xd9\x36\x2e\x4d\x2b\xd2\x2a\x09\x6f\x22\xd6\xe0\x1a\x15\xed\xa5\xa9\x34\xed\x35\x3f\xf6\xe1\x3b\x54\x56\x78\x6a\xdb\xbd\x3d\x17\x0d\x62\x77\x7d\x37\x4a\xf4\x7a\x39\x53\x9a\x72\xf4\x7d\x97\x42\x38\xd5\xe1\x91\x99\x0c\x7c\x9d\x94\xfe\xc0\xdd\xe7\x43\x44\xbd\xb2\x4b\x6f\x9a\x36\x01\x95\xb2\x6f\x51\xb2\x09\x18\xf1\xfc\x65\x17\x7c\x1f\x9e\x3e\x05\x94\x83\x1d\x20\x38\xa2\xbb\x38\x3a\x1f\x53\xd9\xe6\x2d\x9d\xab\xf0\x48\x90\xf4\x6f\xcf\x37\x76\x7e\xa2\xf3\x53\xc2\x64\x90\x18\x80\x2b\xba\xae\xf8\xee\x46\x19\xe6\x5c\x05\x4f\x2a\x09\x93\x31\x3c\xb9\xf6\x0d\x76\xe3\xba\x5d\x0a\xad\xe3\x36\x57\x14\xd3\xa9\xba\x38\x3a\xaf\xfb\xfb\xa6\xed\x85\x73\xe3\x3d\x28\x85\xc8\x8d\x15\x53\x6e\xde\x1f\x8c\x73\x86\xb7\x7f\x24\x8c\x4d\x58\x82\xbb\xcd\xb1\x26\x29\x7a\xbd\x9e\xce\x95\xc3\x82\x9a\x41\x9e\xda\x46\x7c\x6f\xdc\xee\x52\x31\x7c\xf8\x68\x96\xdb\xb9\xdb\x8e\x58\x6c\x1b\xf5\x98\x71\xf7\x16\x0b\x15\x8a\xe0\x6e\x78\x71\x74\xbe\xb9\x3d\xb8\xcf\x09\xa9\xbb\x2d\x8c\x2b\x8d\x1e\x82\x89\xd5\xea\x17\x04\xb7\x2f\x0d\x5e\x7c\xff\xfd\x76\xcb\x23\xf2\xed\xde\x71\xf4\x9c\x51\x85\x48\x83\x65\xc2\xa8\xc5\xb5\x6a\xbc\x5e\x63\x29\x76\x3e\x3c\xa1\xb3\x23\x37\x13\xb4\x46\xd4\xec\x58\xce\x03\x48\x1a\x26\x41\xb4\x57\x15\x47\xd1\x13\x15\x3f\x51\xae\x7f\x67\x7b\x21\x26\x37\x2c\x98\xff\x1d\xd0\x5c\xd9\x6f\x7c\xa2\x08\xce\x2a\x8e\x9c\xd1\xa4\x92\x14\x9c\x8d\x29\x20\xd2\x76\x8b\x4b\x29\xae\x59\x4a\xd3\xf0\x33\xe7\x3e\xf0\xd8\x85\xfd\xbf\xec\x9d\x1d\x9e\xbc\x8d\x8d\xa8\xf0\x1c\x6b\x0a\xe9\x3f\xb8\xef\xac\xfd\x8f\x1d\xe6\xf5\x66\x53\xf4\xac\x60\xb3\xef\xf5\xa6\xc2\x26\x67\x9b\x76\x9b\x10\xb6\x2f\x38\x0d\x90\x2e\xe7\x2c\x4e\x51\x46\xd9\x8d\xe8\xd7\x38\x49\x3b\x65\x02\xc5\x81\x94\xd6\x46\xc6\xb9\x50\xb4\xce\xa7\x0b\xee\x61\x0b\xae\x2e\x57\x8d\xe2\x13\xb3\xc9\xb7\x4e\xd4\xbb\x0b\xbe\x90\xfc\xd1\x30\xd1\x37\xed\xb0\x7b\x84\xca\x2a\x6d\x6e\xae\xa9\x98\x71\xc7\xa0\xbf\x82\xe5\xac\xd2\x08\xb1\x2e\x3b\x3c\xa2\x04\x96\xef\xd6\x2e\xe4\x22\xa1\x86\x48\xa3\xfe\x5a\x02\x2e\xc9\xdc\x79\xff\x1b\x00\x00\xff\xff\xb7\x23\x01\x4f\xb1\x37\x00\x00")

func mechCSSBytes() ([]byte, error) {
	return bindataRead(
		_mechCSS,
		"mech.css",
	)
}

func mechCSS() (*asset, error) {
	bytes, err := mechCSSBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mech.css", size: 14257, mode: os.FileMode(436), modTime: time.Unix(1601249739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHTML,
	"mech.html":  mechHTML,
	"mechs.html": mechsHTML,
	"mech.css":   mechCSS,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHTML, map[string]*bintree{}},
	"mech.css":   &bintree{mechCSS, map[string]*bintree{}},
	"mech.html":  &bintree{mechHTML, map[string]*bintree{}},
	"mechs.html": &bintree{mechsHTML, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
